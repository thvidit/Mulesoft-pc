<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/core"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:spring="http://www.springframework.org/schema/beans"
            xmlns:spring-context="http://www.springframework.org/schema/context"
            targetNamespace="http://www.mulesoft.org/schema/mule/core"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>
    <xsd:import namespace="http://www.springframework.org/schema/context"
                schemaLocation="http://www.springframework.org/schema/context/spring-context-3.1.xsd"/>

    <!--==============================================================-->
    <!--   Structure                                                  -->
    <!--==============================================================-->

    <!-- This defines the structure in abstract terms (except for a few simple/unique things like
         global properties).  We then provide some implementations below.  Other modules
         can provide other implementations. -->

    <xsd:complexType name="annotationsType">
        <xsd:sequence>
            <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="annotatedType" abstract="true">
        <xsd:sequence>
            <xsd:element name="annotations" type="annotationsType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other" processContents="lax">
            <xsd:annotation>
                <xsd:documentation>
                    Allow any third-parties to annotate these elements with global attributes.  All types for
                    top-level elements must extend this.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:anyAttribute>
    </xsd:complexType>

    <xsd:complexType name="annotatedMixedContentType" abstract="true" mixed="true">
        <xsd:sequence>
            <xsd:element name="annotations" type="annotationsType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other" processContents="lax">
            <xsd:annotation>
                <xsd:documentation>
                    Allow any third-parties to annotate these elements with global attributes
                </xsd:documentation>
            </xsd:annotation>
        </xsd:anyAttribute>
    </xsd:complexType>

    <xsd:element name="mule" type="muleType">
        <xsd:annotation>
            <xsd:documentation>
                Either the root element of a Mule configuration, or a "top-level" element in a Spring configuration that contains further Mule elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="muleType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Holds any kind of documentation that accompanies this configuration file. It is intended to be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:choice minOccurs="0" maxOccurs="unbounded">
                        <xsd:group ref="springRootElements"/>
                        <xsd:group ref="muleRootElements"/>
                    </xsd:choice>
                </xsd:sequence>
                <xsd:attribute name="version" type ="xsd:string"/>

            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:group name="springRootElements">
        <xsd:choice>
            <xsd:element ref="spring:beans">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows the embedding of any Spring elements.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="spring:bean">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows Spring beans to be defined alongside Mule elements.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="spring-context:property-placeholder">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows Spring property placeholders to be configured directly in the Mule configuration file.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="spring:ref">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows to reference Spring beans alongside Mule elements.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:choice>
    </xsd:group>

    <xsd:group name="muleRootElements">
        <xsd:choice>
            <xsd:element ref="global-property"/>
            <xsd:element ref="configuration"/>
            <xsd:element ref="notifications"/>
            <xsd:element ref="abstract-extension"/>
            <xsd:element ref="abstract-shared-extension"/>
            <xsd:element ref="abstract-mixed-content-extension"/>
            <xsd:element ref="abstract-agent"/>
            <xsd:element ref="abstract-security-manager"/>
            <xsd:element ref="abstract-transaction-manager"/>
            <xsd:element ref="abstract-shared-transaction-manager"/>
            <xsd:element ref="abstract-connector"/>
            <xsd:element ref="abstract-shared-connector"/>
            <xsd:element ref="abstract-global-endpoint"/>
            <xsd:element ref="abstract-exception-strategy"/>
            <xsd:element ref="abstract-flow-construct" />
            <xsd:element ref="flow" />
            <xsd:element ref="sub-flow" />
            <xsd:element ref="abstract-model"/>
            <xsd:element ref="abstract-interceptor-stack"/>
            <xsd:element ref="abstract-filter"/>
            <xsd:element ref="abstract-transformer"/>
            <xsd:element ref="processor-chain"/>
            <xsd:element ref="custom-processor"/>
            <xsd:element ref="abstract-empty-processor"/>
            <xsd:element ref="invoke"/>
            <xsd:element ref="set-payload"/>
            <xsd:element ref="abstract-global-intercepting-message-processor"/>
            <xsd:element ref="custom-queue-store" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element ref="abstract-processing-strategy" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="descriptionType">
        <xsd:complexContent mixed="true">
            <xsd:extension base="xsd:anyType"/>
        </xsd:complexContent>
    </xsd:complexType>

            <xsd:element name="global-property" type="globalPropertyType">
                <xsd:annotation>
                    <xsd:documentation>
                        A global property is a named string. It can be inserted in most attribute values using standard (ant-style) Spring placeholders.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="configuration" type="configurationType">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies defaults and general settings for the Mule instance.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="notifications" type="notificationManagerType">
                <xsd:annotation>
                    <xsd:documentation>
                        Registers listeners for notifications and associates interfaces with particular events.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

    <xsd:element name="abstract-shared-extension" abstract="true" type="abstractExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element or 'mule-domain'. Other transports and modules can extend this if they need to add global elements to the configuration (but consider the more specific elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-extension" abstract="true" type="abstractExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element. Other transports and modules can extend this if they need to add global elements to the configuration (but consider the more specific elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractExtensionType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-mixed-content-extension" abstract="true" type="abstractMixedContentExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element. Other transports and modules can extend this if they need to add global elements with mixed content to the configuration (but consider the more specific elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMixedContentExtensionType">
        <xsd:complexContent mixed="true">
            <xsd:extension base="annotatedMixedContentType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="expression-component" substitutionGroup="abstract-mixed-content-message-processor">
        <xsd:complexType>
            <xsd:complexContent mixed="true">
                <xsd:extension base="abstractMixedContentMessageProcessorType">
                    <xsd:attribute name="file" use="optional"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="abstract-shared-connector" abstract="true" type="abstractConnectorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for connector elements. Connector elements allow properties to be configured across all endpoints that use the same transport. If multiple connectors are defined for the same transport, each endpoint must name which connector is being used.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-connector" abstract="true" type="abstractConnectorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for connector elements. Connector elements allow properties to be configured across all endpoints that use the same transport. If multiple connectors are defined for the same transport, each endpoint must name which connector is being used.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractConnectorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the connector so that other elements can reference it.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Agents -->
    <xsd:element name="abstract-agent" abstract="true" type="abstractAgentType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for agent elements. Are used to run processes as part of the server instance.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractAgentType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-agent" type="customAgentType" substitutionGroup="abstract-agent"/>
    <xsd:complexType name="customAgentType">
        <xsd:complexContent>
            <xsd:extension base="abstractAgentType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required"/>
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the agent in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-queue-store" abstract="true" type="abstractQueueStoreType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for queue store elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractQueueStoreType" abstract="true">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="defaultQueueStoreType">
        <xsd:complexContent>
            <xsd:extension base="abstractQueueStoreType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="queue-store" type="refQueueStoreType" substitutionGroup="abstract-queue-store">
        <xsd:annotation>
            <xsd:documentation>
                A reference to a queue store defined elsewhere.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="refQueueStoreType">
        <xsd:complexContent>
            <xsd:extension base="abstractQueueStoreType">
                <xsd:attribute name="ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the queue store to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-queue-store" type="customQueueStoreType" substitutionGroup="abstract-queue-store"/>
    <xsd:complexType name="customQueueStoreType">
        <xsd:complexContent>
            <xsd:extension base="abstractQueueStoreType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required"/>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the store in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="default-in-memory-queue-store" type="defaultQueueStoreType" substitutionGroup="abstract-queue-store">
        <xsd:annotation>
            <xsd:documentation>
                The default in-memory queue store for the application.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="default-persistent-queue-store" type="defaultQueueStoreType" substitutionGroup="abstract-queue-store">
        <xsd:annotation>
            <xsd:documentation>
                The default persistent queue store for the application.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="simple-in-memory-queue-store" type="defaultQueueStoreType" substitutionGroup="abstract-queue-store">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: simple-in-memory-queue-store is deprecated since Mule 3.5 and will be removed in Mule 4.0. Use default-in-memory-queue-store instead.
                A simple in-memeory queue store.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="file-queue-store" type="defaultQueueStoreType" substitutionGroup="abstract-queue-store">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: file-queue-store is deprecated since Mule 3.5 and will be removed in Mule 4.0. Use default-persistent-queue-store instead.
                A simple file-based queue store.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-global-endpoint" abstract="true" type="abstractGlobalEndpointType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for global endpoint elements. Global endpoints are named templates that allow you to define an endpoint once and refer to it in several places. The same template can be used for both inbound and outbound endpoints.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractGlobalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint so that other elements can reference it. This name can also be referenced in the MuleClient.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-inbound-endpoint" abstract="true" type="abstractInboundEndpointType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for inbound endpoint elements. Inbound endpoints receive messages from the underlying transport. The message payload is then delivered to the component for processing.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractInboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint in the registry. There is no need to set the 'name' attribute on inbound or outbound endpoints, only on global endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-outbound-endpoint" abstract="true" type="abstractOutboundEndpointType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for outbound endpoint elements. Outbound endpoints dispatch messages to the underlying transport.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractOutboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint in the registry. There is not need to set the 'name' attribute on inbound or outbound endpoints, only on global endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Message Processors -->
    <xsd:element name="abstract-message-processor" abstract="true" type="abstractMessageProcessorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message processor elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-mixed-content-message-processor" abstract="true" type="abstractMixedContentMessageProcessorType" >
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message processor elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMixedContentMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedMixedContentType"/>
        </xsd:complexContent>
    </xsd:complexType>



    <xsd:element name="abstract-observer-message-processor" abstract="true" type="abstractObserverMessageProcessorType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message processors that observe the message but do not mutate it used for exmaple for logging.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractObserverMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:group name="messageProcessorOrOutboundEndpoint">
        <xsd:choice>
            <xsd:element ref="abstract-message-processor">
                <xsd:annotation>
                    <xsd:documentation>
                        A message processor
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="abstract-outbound-endpoint">
                <xsd:annotation>
                    <xsd:documentation>
                        An outbound endpoint
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="abstract-mixed-content-message-processor"/>
        </xsd:choice>
    </xsd:group>

    <xsd:element name="processor" type="refMessageProcessorType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A reference to a message processor defined elsewhere.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="refMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the message processor to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-processor" type="customMessageProcessorType" substitutionGroup="abstract-message-processor"/>
    <xsd:complexType name="customMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required"/>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the message processor in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-empty-processor" type="abstractEmptyMessageProcessorType" substitutionGroup="abstract-message-processor"/>
    <xsd:complexType name="abstractEmptyMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="processor-chain" type="messageProcessorChainType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>The use of globally defined processor-chain element is deprecated since Mule 3.2.  Use sub-flow instead.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="sub-flow" type="subFlowType">
        <xsd:annotation>
            <xsd:documentation>
                A chain of message processors processed synchronously that can be referenced and reused.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="subFlowType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the sub-flow. It is intended to be
                                "human readable" only and  is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" maxOccurs="unbounded" />
                </xsd:sequence>
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the sub-flow in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="messageProcessorChainType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the processor chain. It is intended to be "human readable" only and
                                is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the message processor in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="invoke" type="invokeType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Invokes the method of a given object using method arguments expressed using mule expressions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="invokeType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="object-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the object whose method will be invoked.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="method" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the method to be invoked.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="methodArguments" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Comma-seperated list of mule expression that when evaluated are the arguments for the method invocation
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="methodArgumentTypes" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Comma-seperated list of mule expression that when evaluated are the arguments for the method invocation
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the message processor in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="enricher" type="messageEnricherType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Enriches the current message, using expressins to define source and target,
                with the result of processing a nested message processor.  Use the target and optionally sourcre attributes
                for 1-1 enrichment.  If you require n-m enrichment than use the child 'enrich' elements instead.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="messageEnricherType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" />
                    <xsd:element name="enrich" type="extractEnrichPairType" minOccurs="0"
                        maxOccurs="unbounded" />
                </xsd:sequence>
                <xsd:attribute name="source" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            An evaluator expression used to extract a value from the result of the
                            enrichment message processor. If an
                            expression is not specified then the payload of the
                            message is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="target" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The enricher expression used to enrich the current message with the result
                            the processing of the enrichement message processor specified.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="extractEnrichPairType">
        <xsd:attributeGroup ref="enricherSourceTargetAttributes" />
    </xsd:complexType>

    <xsd:attributeGroup name="enricherSourceTargetAttributes">
        <xsd:attribute name="source" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    An evaluator expression used to extract a value from the result of the
                    enrichment message processor. If an
                    expression is not specified then the payload of the
                    message is used.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The enricher expression used to enrich the current message with the result
                    the processing of the enrichement message processor specified.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="async" type="asyncType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nested list of message processors asynchronously using a thread pool
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="asyncType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" maxOccurs="unbounded"/>
                </xsd:sequence>
                 <xsd:attribute name="processingStrategy" use="optional" default="queued-asynchronous">
                    <xsd:annotation>
                        <xsd:documentation>
                            Strategy used to process the configured message processors when exchange pattern is 'one-way'.  
                            This attribute accepts either one of the enumerated strategies with default configuration options or a reference to a gloablly defined strategy.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:union>
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>
                                            The name of a globally configured processing strategy
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:restriction>
                            </xsd:simpleType>
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:NMTOKEN">
                                    <xsd:enumeration value="asynchronous">
                                        <xsd:annotation>
                                            <xsd:documentation>
                                                Uses a thread pool to process the pipeline of message processors asynchronously.
                                            </xsd:documentation>
                                        </xsd:annotation>
                                    </xsd:enumeration>
                                    <xsd:enumeration value="queued-asynchronous">
                                        <xsd:annotation>
                                            <xsd:documentation>
                                                Decouples the recieving of a new message from it's processing using a queue. 
                                                The queue is polled and a thread pool is used to process the pipeline of message processors asynchronously.
                                            </xsd:documentation>
                                        </xsd:annotation>
                                    </xsd:enumeration>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:union>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="name" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Optional name that will be used to name the threads used by this flow.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="request-reply" type="requestReplyType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Provides support for the asynchronous request/reply pattern where a message is sent via a one-way outbound endpoint
                and an asynchronous response is received via a seperate inbound one-way endpoint.  Message flow is blocked while
                waiting for the reply message.  Note: This does not currently support setting of replyTo property on the outbound message.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="requestReplyType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint">
                        <xsd:annotation>
                            <xsd:documentation>
                                The outbound endpoint or message processor that will perform the asynchronous request.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:group>
                    <xsd:element ref="abstract-inbound-endpoint">
                        <xsd:annotation>
                            <xsd:documentation>
                                The inbound endpoint from which the asynchronous reply message will be received.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="timeout" type="substitutableInt" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The time (ms) to wait for an asynchronous reply message to be received.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="storePrefix" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines the prefix of the object store names.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-poll-override" abstract="true" type="abstractPollOverrideType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for poll overrides
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractPollOverrideType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="watermark" type="watermarkType" substitutionGroup="abstract-poll-override">
        <xsd:annotation>
            <xsd:documentation>
                Defines watermark based synchronization parameters
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="watermarkType">
        <xsd:complexContent>
            <xsd:extension base="abstractPollOverrideType">
                <xsd:attribute name="variable" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The key that is going to be used to store/retrieve the watermark
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="default-expression" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default value to be used for the watermark
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="update-expression" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to be used to update the watermark
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="selector" use="optional">
                	<xsd:simpleType>
						<xsd:restriction base="substitutableName">
							<xsd:enumeration value="MIN"/>
							<xsd:enumeration value="MAX"/>
							<xsd:enumeration value="FIRST"/>
							<xsd:enumeration value="LAST"/>
						</xsd:restriction>
					</xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="selector-expression" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to retrieve the values the selector will evaluate
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="object-store-ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The object store where the watermark is going to be stored
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="logger" type="loggerType" substitutionGroup="abstract-observer-message-processor">
        <xsd:annotation>
    <xsd:documentation>
        Performs logging using an expression that determines what should be logged. By default the current messages is
        logged using the DEBUG level to the 'org.mule.api.processor.LoggerMessageProcessor' category but the level and
        category can both be configured to suit your needs.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="loggerType">
        <xsd:complexContent>
            <xsd:extension base="abstractObserverMessageProcessorType">
                <xsd:attribute name="message" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Message that will be logged.  Embedded expressions can be used to extract value from the current message.  If no message is
                            specified then the current message is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="level" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The logging level to be used. Default is DEBUG.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="ERROR"/>
                            <xsd:enumeration value="WARN"/>
                            <xsd:enumeration value="INFO"/>
                            <xsd:enumeration value="DEBUG"/>
                            <xsd:enumeration value="TRACE"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="category" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The log category to be used
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--  TODO
    <xsd:element name="seda-stage" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nest list of message processors asychronously using a seda stage.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="asyncType">
                    <xsd:sequence>
                        <xsd:element ref="queue-profile" minOccurs="0"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    -->

    <xsd:element name="transactional" type="abstractTransactional" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nest list of message processors within a transaction
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractTransactional">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" maxOccurs="unbounded"/>
                    <xsd:element ref="abstract-exception-strategy" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="action" type="transactionalActionType" default="ALWAYS_BEGIN"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="transactionalActionType">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="ALWAYS_BEGIN"/>
            <xsd:enumeration value="BEGIN_OR_JOIN"/>
        </xsd:restriction>
    </xsd:simpleType>


    <!-- Message Sources -->
    <xsd:element name="abstract-message-source" abstract="true" type="abstractMessageSourceType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message source elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMessageSourceType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:group name="messageSourceOrInboundEndpoint">
        <xsd:choice>
            <xsd:element ref="abstract-message-source">
                <xsd:annotation>
                    <xsd:documentation>
                        A message source
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="abstract-inbound-endpoint">
                <xsd:annotation>
                    <xsd:documentation>
                        An inbound endpoint
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:choice>
    </xsd:group>

    <xsd:element name="custom-source" type="customMessageSourceType" substitutionGroup="abstract-message-source"/>
    <xsd:complexType name="customMessageSourceType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageSourceType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="composite-source" type="compositeMessageSourceType" substitutionGroup="abstract-message-source"/>
    <xsd:complexType name="compositeMessageSourceType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageSourceType">
                <xsd:sequence maxOccurs="unbounded">
                    <xsd:group ref="messageSourceOrInboundEndpoint"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="commonTransformerType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-transformer" abstract="true" type="commonTransformerType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transformer elements. Transformers convert message payloads.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractTransformerType">
        <xsd:complexContent>
            <xsd:extension base="commonTransformerType">
                <xsd:attribute name="name" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the transformer so that other elements can reference it. Required if the transformer is defined at the global level.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="returnClass" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The class of the message generated by the transformer. This is used if transformers are auto-selected and to validate that the transformer returns the correct type.  Note that if you need to specify an array type you need postfix the class name with '[]'. For example, if you want return a an Orange[], you set the return class to 'org.mule.tck.testmodels.fruit.Orange[]'.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="ignoreBadInput" type="substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Many transformers only accept certain classes. Such transformers are never called with inappropriate input (whatever the value of this attribute). If a transformer forms part of a chain and cannot accept the current message class, this flag controls whether the remaining part of the chain is evaluated. If true, the next transformer is called. If false the chain ends, keeping the result generated up to that point.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="mimeTypeAttributes">
                    <xsd:annotation>
                        <xsd:documentation>
                            The mime type of the transformer's output
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attributeGroup>
                <xsd:attribute name="encoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            String encoding used for transformer output.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="globalPropertyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the property. This is used inside Spring placeholders.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="value" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The value of the property. This replaces each occurence of a Spring placeholder.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- seemed pointless making these simple container types abstract -->
    <xsd:complexType name="inboundCollectionType">
        <xsd:sequence>
            <xsd:element ref="abstract-inbound-endpoint" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="abstract-inbound-router"/>
                <xsd:element ref="abstract-transformer" />
                <xsd:element ref="splitter"/>
                <xsd:element ref="collection-splitter"/>
                <xsd:element ref="processor"/>
                <xsd:element ref="custom-processor"/>
            </xsd:choice>
            <xsd:element ref="abstract-catch-all-strategy" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="abstract-catch-all-strategy" abstract="true" type="abstractCatchAllStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for catch-all strategy elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractCatchAllStrategyType"/>

    <xsd:element name="abstract-inbound-router" abstract="true" type="abstractInboundRouterType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for inbound router elements, which control how incoming messages are handled.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractInboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-filter" abstract="true" type="commonFilterType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for filter elements, which control which messages are handled.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="commonFilterType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="abstractFilterType">
        <xsd:complexContent>
            <xsd:extension base="commonFilterType">
                <xsd:attribute name="name" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the filter so that other elements can reference it. Required if the filter is defined at the global level.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="outboundCollectionType">
        <xsd:sequence>
            <xsd:element ref="abstract-outbound-router" maxOccurs="unbounded"/>
            <xsd:element ref="abstract-catch-all-strategy" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="matchAll" type="substitutableBoolean" default="false">
            <xsd:annotation>
                <xsd:documentation>
                    If true, the output message will be sent to all routers. Otherwise, only the first matching router is used.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstract-outbound-router" abstract="true" type="abstractOutboundRouterType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for outbound router elements, which control how outgoing messages are delivered to the outbound endpoints.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractOutboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-transaction-manager" abstract="true" type="abstractTransactionManagerType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction manager elements, which are used to coordinate transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-shared-transaction-manager" abstract="true" type="abstractTransactionManagerType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction manager elements that can be defined as shared resource, which are used to coordinate transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractTransactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="configurationType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="default-threading-profile" type="threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default threading profile, used by components and by endpoints for dispatching and receiving if no more specific configuration is given.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="default-dispatcher-threading-profile" type="threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default dispatching threading profile, which modifies the default-threading-profile values and is used by endpoints for dispatching messages. This can also be configured on connectors, in which case the connector configuration is used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="default-receiver-threading-profile" type="threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default receiving threading profile, which modifies the default-threading-profile values and is used by endpoints for receiving messages. This can also be configured on connectors, in which case the connector configuration is used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="default-service-threading-profile" type="threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default service threading profile, which modifies the default-threading-profile and is used by services for processing messages. This can also be configured on models or services, in which case these configurations will be used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-reconnection-strategy" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default reconnection strategy, used by connectors and endpoints. This can also be configured on connectors, in which case the connector configuration is used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="expression-language" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Configuration of Mule Expression Language
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:complexContent mixed="true">
                                <xsd:extension base="abstractMixedContentExtensionType">
                                    <xsd:sequence>
                                        <xsd:element minOccurs="0" maxOccurs="unbounded" name="import">
                                            <xsd:complexType>
                                                <xsd:attribute name="name" type="nonBlankString" />
                                                <xsd:attribute name="class" use="required" type="substitutableClass" />
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element minOccurs="0" maxOccurs="unbounded" name="alias">
                                            <xsd:complexType>
                                                <xsd:attribute name="name" use="required" type="nonBlankString" />
                                                <xsd:attribute name="expression" use="required" type="nonBlankString" />
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element minOccurs="0" maxOccurs="1" name="global-functions" >
                                            <xsd:complexType mixed="true">
                                                <xsd:attribute name="file" type="nonBlankString" />
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                    <xsd:attribute name="autoResolveVariables" default="true" type="substitutableBoolean" />
                                </xsd:extension>
                            </xsd:complexContent>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="abstract-configuration-extension" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Mule application configuration extensions. Extensions can be defined as child of the configuration elements and then accessed by each module that defines it.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="defaultResponseTimeout" type="xsd:string" default="10000">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default period (ms) to wait for a synchronous response.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultTransactionTimeout" type="xsd:string" default="30000">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default timeout (ms) for transactions. This can also be configured on transactions, in which case the transaction configuration is used instead of this default.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultExceptionStrategy-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default exception strategy for every flow / service. This must be a reference to a global exception strategy.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="shutdownTimeout" type="substitutableInt" default="5000">
                    <xsd:annotation>
                        <xsd:documentation>
                            (As of Mule 2.2.2) The time in milliseconds to wait for any in-progress messages to finish processing before Mule shuts down. After this threshold has been reached, Mule starts interrupting threads, and messages can be lost. If you have a very large number of services in the same Mule instance, if you have components that take more than a couple seconds to process, or if you are using large payloads and/or slower transports, you should increase this value to allow more time for graceful shutdown. The value you specify is applied to services and separately to dispatchers, so the default value of 5000 milliseconds specifies that Mule has ten seconds to process and dispatch messages gracefully after shutdown is initiated.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="useExtendedTransformations" type="substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Backwards Compatabilty Flag: Used to disable the new extended transformation support introduced in Mule 3.3 including enforcement of transformations, implicit transformations and no direct transformer lookup.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="flowEndingWithOneWayEndpointReturnsNull" type="substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Backwards Compatabilty Flag: Used to revert to Mule 3.2 behaviour of one-way outbound endpoints when they are the last element inside a request-response flow. When true the value returned by the endpoint will be null, otherwise will be an echo of the received event.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="enricherPropagatesSessionVariableChanges" type="substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Backwards Compatabilty Flag:  Used to revert to Mule 3.1/3.2 behaviour of the message enricher so that session variables added or modified within an enricher are propagated up into the flow where the enricher is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultObjectSerializer-ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            An optional reference to an ObjectSerializer to be used as the application's default
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultProcessingStrategy" type="flowProcessingStrategyType" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default processing strategy to use in all flows which don't specify otherwise
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-configuration-extension" abstract="true" type="abstractConfigurationExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'configuration' element. Other transports and modules can extend this if they need to add elements to the configuration.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractConfigurationExtensionType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="notificationManagerType">
        <xsd:complexContent >
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="notification" type="defineNotificationType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Associates an event with an interface. Listeners that implement the interface will receive instances of the event.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="disable-notification" type="disableNotificationType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Blocks the association of an event with a particular interface. This filters events after the association with a particular interface (and so takes precedence).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="notification-listener" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Registers a bean as a listener with the notification system. Events are dispatched by reflection - the listener will receive all events associated with any interfaces it implements. The relationship between interfaces and events is configured by the notification and disable-notification elements.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:attribute name="ref" type="xsd:string" use="required">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The bean that will receive notifications.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                            <xsd:attribute name="subscription" type="xsd:string">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        An optional string that is compared with the event resource identifier. Only events with matching identifiers will be sent. If no value is given, all events are sent.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="dynamic" type="substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If the notification manager is dynamic, listeners can be registered dynamically at runtime via the MuleContext, and the configured notification can be changed. Otherwise, some parts of Mule will cache notification configuration for efficiency and will not generate events for newly enabled notifications or listeners. The default value is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="defineNotificationType">
        <xsd:attribute name="event-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The class associated with a notification event that will be delivered to the interface. This can be used instead of the 'event' attribute to specify a custom class.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The notification event to deliver.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface (class name) that will receive the notification event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The interface that will receive the notification event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="disableNotificationType">
        <xsd:attribute name="event-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The class associated with an event that will no longer be delivered to any interface. This can be used instead of the 'event' attribute to specify a custom class.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The event you no longer want to deliver.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface (class name) that will no longer receive the event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The interface that will no longer receive the event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>


    <xsd:simpleType name="notificationTypes">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="CONTEXT"/>
            <xsd:enumeration value="MODEL">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED: The use of 'model' and 'service' is deprecated in Mule 3.4 and will be removed in Mule 4.0. As such this
                        notification is also deprecated and will be removed in Mule 4.0.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="SERVICE">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED: The use of 'model' and 'service' is deprecated in Mule 3.4 and will be removed in Mule 4.0. As such this
                        notification is also deprecated and will be removed in Mule 4.0.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="SECURITY"/>
            <xsd:enumeration value="ASYNC-MESSAGE"/>
            <xsd:enumeration value="ENDPOINT-MESSAGE"/>
            <xsd:enumeration value="CONNECTOR-MESSAGE"/>
            <xsd:enumeration value="COMPONENT-MESSAGE"/>
            <xsd:enumeration value="PIPELINE-MESSAGE"/>
            <xsd:enumeration value="MANAGEMENT"/>
            <xsd:enumeration value="MESSAGE-PROCESSOR"/>
            <xsd:enumeration value="EXCEPTION-STRATEGY"/>
            <xsd:enumeration value="CONNECTION"/>
            <xsd:enumeration value="REGISTRY"/>
            <xsd:enumeration value="CUSTOM"/>
            <xsd:enumeration value="EXCEPTION"/>
            <xsd:enumeration value="TRANSACTION"/>
            <xsd:enumeration value="ROUTING"/>
        </xsd:restriction>
    </xsd:simpleType>
    <!--==============================================================-->
    <!-- Models                                                       -->
    <!--==============================================================-->

    <xsd:element name="abstract-model" abstract="true" type="abstractModelType">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: The 'model' element is deprecated in Mule 3.4 and will be removed in Mule 4.0.  Flows do not need to be configured inside a 'model' element. 
                A placeholder for model elements. A model provides basic settings and processing for all the services it contains.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractModelType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                    <xsd:group ref="entryPointResolvers"/>
                    <xsd:element ref="abstract-service" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="nonBlankString">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this model.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="seda-model" type="sedaModelType" substitutionGroup="abstract-model">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: The 'model' element is deprecated in Mule 3.4 and will be removed in Mule 4.0.  Flows do not need to be configured inside a 'model' element. 
                A staged event-driven architecture (SEDA) model has separate threads and queues for each service.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="sedaModelType">
        <xsd:complexContent>
            <xsd:extension base="abstractModelType">
                <xsd:sequence>
                    <xsd:element ref="abstract-queue-profile" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="inherit" type="xsd:boolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If true, this model element is an extension of a previous model element with the same name.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="model" type="defaultModelType" substitutionGroup="abstract-model">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: The 'model' element is deprecated in Mule 3.4 and will be removed in Mule 4.0.  Flows do not need to be configured inside a 'model' element. 
                The container for a set of services, providing basic settings and processing for all the services it contains.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="defaultModelType">
        <xsd:complexContent>
            <xsd:extension base="sedaModelType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Model elements -->

    <xsd:element name="abstract-queue-profile" abstract="true" type="abstractQueueProfileType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a queue profile, which controls how messages are queued.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractQueueProfileType"/>

    <!-- to give a cleaner config we allow either a set or an individual entry (but not both).-->
    <xsd:group name="entryPointResolvers">
        <xsd:choice>
            <xsd:element ref="abstract-entry-point-resolver-set" minOccurs="0"/>
            <!-- we could allow many of these, but it looks ugly -->
            <xsd:element ref="abstract-entry-point-resolver" minOccurs="0"/>
        </xsd:choice>
    </xsd:group>

    <xsd:element name="abstract-entry-point-resolver-set" abstract="true" type="abstractEntryPointResolverSetType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for entry point resolver set elements. These combine a group of entry point resolvers, trying them in turn until one succeeds.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractEntryPointResolverSetType"/>

    <xsd:element name="legacy-entry-point-resolver-set" type="extensibleEntryPointResolverSet"
                 substitutionGroup="abstract-entry-point-resolver-set">
        <xsd:annotation>
            <xsd:documentation>
                An extensible set of entry point resolvers (which determine how a message is passed to a component in Java) that already contains resolvers to implement the standard logic. This is already provided by default and is only needed explicitly if it will be extended with other entry point resolvers. This element can be set on the model or component; the model value provides a default that individual component values can override.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="entry-point-resolver-set" type="extensibleEntryPointResolverSet"
                 substitutionGroup="abstract-entry-point-resolver-set">
        <xsd:annotation>
            <xsd:documentation>
                An extensible set of entry point resolvers. These determine how a message is passed to a component in Java. Each entry point resolver is tried in turn until one succeeds in delivering the message to the component. This element can be set on the model or component; the model value provides a default that individual component values can override.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="extensibleEntryPointResolverSet">
        <xsd:complexContent>
            <xsd:extension base="abstractEntryPointResolverSetType">
                <xsd:sequence>
                    <xsd:element ref="abstract-entry-point-resolver" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-entry-point-resolver-set" type="customEntryPointResolverSetType"
                 substitutionGroup="abstract-entry-point-resolver-set">
        <xsd:annotation>
            <xsd:documentation>
                A custom entry point resolver set. This allows user-supplied code to determine how a message is passed to a component in Java. This element can be set on the model or component; the model value provides a default that individual component values can override.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customEntryPointResolverSetType">
        <xsd:complexContent>
            <xsd:extension base="abstractEntryPointResolverSetType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            An implementation of the EntryPointResolverSet interface.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-entry-point-resolver" abstract="true" type="abstractEntryPointResolverType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an entry point resolver element. Entry point resolvers define how payloads are delivered to Java code by choosing the method to call.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="callable-entry-point-resolver" type="abstractEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                An entry point resolver for components that implement the Callable interface. This passes a MuleEventContext to the component. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractEntryPointResolverType"/>

    <xsd:element name="custom-entry-point-resolver" type="customEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                A custom entry point resolver. This allows user-supplied code to determine how a message is passed to a component in Java. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="abstractEntryPointResolverType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            An implementation of the EntryPointResolver interface.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="baseEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="abstractEntryPointResolverType">
                <xsd:attribute name="acceptVoidMethods" type="substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the resolver should call void methods. By default, void methods are not considered as possible candidates for message delivery.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="property-entry-point-resolver" type="propertyEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                Uses a message property to select the component method to be called. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="propertyEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="baseEntryPointResolverType">
                <xsd:attribute name="property" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the message property used to select a method on the component.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="method-entry-point-resolver" type="methodEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                Delivers the message to a named method. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="methodEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="baseEntryPointResolverType">
                <xsd:sequence>
                    <xsd:element ref="include-entry-point" minOccurs="1" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reflection-entry-point-resolver" type="reflectionEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                Generates a list of candidate methods from the component via reflections. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reflectionEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="baseEntryPointResolverType">
                <xsd:sequence>
                    <xsd:element name="exclude-object-methods" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                If specified, methods in the Java Object interface are not included in the list of possible methods that can receive the message.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="exclude-entry-point" type="methodType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Explicitly excludes a named method from receiving the message.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="array-entry-point-resolver" type="complexEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                Delivers the message to a method that takes a single array as argument. This element can be set on the model or component; the model value provides a default that individual component values can override. This element can also be used directly or as part of a set of resolvers; the resolvers in a set are used in turn until one is successful.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="no-arguments-entry-point-resolver" type="complexEntryPointResolverType"
                 substitutionGroup="abstract-entry-point-resolver">
        <xsd:annotation>
            <xsd:documentation>
                Calls a method without arguments (the message is not passed to the component).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="complexEntryPointResolverType">
        <xsd:complexContent>
            <xsd:extension base="reflectionEntryPointResolverType">
                <xsd:sequence>
                    <xsd:element ref="include-entry-point" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="enableDiscovery" type="substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            If no method names are configured, attempts to discover the method to invoke based on the inbound message type.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="include-entry-point" type="methodType">
        <xsd:annotation>
            <xsd:documentation>
                A possible method for delivery.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="methodType">
        <xsd:attribute name="method" type="nonBlankString">
            <xsd:annotation>
                <xsd:documentation>
                    The name of the method.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <!--==============================================================-->
    <!--  Services                                                    -->
    <!--==============================================================-->

    <xsd:element name="abstract-service" abstract="true" type="abstractServiceType">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: Services are deprecated in Mule 3.4 and will be removed in Mule 4.0. 
                A placeholder for a service element. Services combine message routing with a component (typically a POJO).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractServiceType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this service.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="baseServiceType">
        <xsd:annotation>
            <xsd:documentation>
                Base support for a model-based wrapper around the POJO service (SEDA, Streaming, etc.)
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractServiceType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the service. It is intended to be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="inbound" type="inboundCollectionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The elements within 'inbound' describe how a service receives messages.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <!-- minOccurs="0" to allow for <forwarding-router/> and/or default component -->
                    <xsd:element ref="abstract-component" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The service component that is invoked when incoming messages are received. If this element is not present, the service simply bridges the inbound and outbound using a pass-through component.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="outbound" type="outboundCollectionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The elements within 'outbound' describe how a service sends or dispatches messages.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="async-reply" type="asyncReplyCollectionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The elements within 'async-reply' describe how asynchronous replies are handled.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                    <xsd:element ref="abstract-message-info-mapping" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The message info mapper used to extract key bits of the message
                                information, such as Message ID or Correlation ID. these
                                properties
                                are used by some routers and this mapping information tells Mule
                                where to get the information from in the current message.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="initialState" default="started">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial state of the service. Usually a service is started automatically ("started"), but this attribute can be used to disable initial startup ("stopped") or start the service in a paused state ("paused").
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="started"/>
                            <xsd:enumeration value="stopped"/>
                            <xsd:enumeration value="paused"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- This is left in for backwards-compatibility only, remove for next major version. -->
    <xsd:element name="legacy-abstract-exception-strategy" abstract="true" type="exceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                Legacy placeholder for an exception strategy element. Exception strategies define how Mule should react to errors.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-exception-strategy" abstract="true" type="exceptionStrategyType" substitutionGroup="legacy-abstract-exception-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an exception strategy element. Exception strategies define how Mule should react to errors.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="exceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                Base type for every exception strategy.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="referenceExceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                Used to reference another exception strategy within flow, service or global exception strategy.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:attribute name="ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the filter to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="abstractNotificationExceptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:attribute name="enableNotifications" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines whether ExceptionNotifications will be fired from this strategy when an exception occurs. Default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name of the exception strategy that will be used in ref attribute of 'exception-strategy' element
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="when" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression that will be evaluated to determine if this exception strategy should be executed. This should always be a boolean expression.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="logException" use="optional" type="expressionBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines whether the handled exception will be logged to its standard logger in the ERROR level before being handled. Default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="abstractExceptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractNotificationExceptionStrategyType">
                <xsd:sequence>
                    <xsd:element name="commit-transaction" type="exceptionPatternType" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                            These exceptions will be considered "delivered" after handling by the exception strategy.  Any exception not
                            accepted by this filter will be redelivered/rolled back.
                            You can set a comma-separated list of wildcard patterns that will be matched against the fully qualified class name of the current exception.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="rollback-transaction" type="exceptionPatternType" maxOccurs="1" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                            These exceptions will be redelivered/rolled back after handling by the exception strategy.
                            You can set a comma-separated list of wildcard patterns that will be matched against the fully qualified class name of the current exception.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>Destination to which an ExceptionMessage will be sent; this could be an outbound endpoint, a router, or other message processor.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:group>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="exceptionPatternType">
        <xsd:attribute name="exception-pattern" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>A comma-separated list of wildcard expressions that will be matched against the fully qualified classname of the current exception received by the ExceptionStrategy.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Reconnection strategies                                    -->
    <!--==============================================================-->

    <xsd:element name="abstract-reconnection-strategy" abstract="true" type="abstractReconnectionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a reconnection strategy element. Reconnection strategies define how Mule should attempt to handle a connection failure.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractReconnectionStrategyType">
        <xsd:sequence>
            <xsd:element ref="abstract-reconnect-notifier" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="blocking" type="substitutableBoolean" default="true">
            <xsd:annotation>
                <xsd:documentation>If false, the reconnection strategy will run in a separate, non-blocking thread</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstract-reconnect-notifier" abstract="true" type="abstractReconnectNotifierType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a reconnection notifier element. The RetryNotifier interface is a callback that allows actions to be performed after each reconnection attempt, e.g., firing server notification events on success or failure.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractReconnectNotifierType"/>

    <xsd:element name="reconnect" type="reconnectSimpleStrategyType"
                 substitutionGroup="abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A reconnection strategy that allows the user to configure how many times a reconnection should be attempted and how long to wait between attempts.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reconnectSimpleStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectionStrategyType">
                <xsd:attribute name="frequency" type="substitutableLong" default="2000">
                    <xsd:annotation>
                        <xsd:documentation>How often (in ms) to reconnect</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="count" type="substitutableInt" default="2">
                    <xsd:annotation>
                        <xsd:documentation>How many reconnection attempts to make</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reconnect-forever" type="reconnectForeverStrategyType"
                 substitutionGroup="abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A reconnection strategy that retries an infinite number of times at the specified frequency.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reconnectForeverStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectionStrategyType">
                <xsd:attribute name="frequency" type="substitutableLong" default="2000">
                    <xsd:annotation>
                        <xsd:documentation>How often (in ms) to reconnect</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reconnect-custom-strategy" type="reconnectCustomStrategyType"
                 substitutionGroup="abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A user-defined reconnection strategy.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reconnectCustomStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectionStrategyType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>A class that implements the RetryPolicyTemplate interface.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reconnect-notifier" type="reconnectNotifierType"
                 substitutionGroup="abstract-reconnect-notifier">
        <xsd:annotation>
            <xsd:documentation>
                Fires a ConnectionNotification upon each reconnection attempt.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reconnectNotifierType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectNotifierType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reconnect-custom-notifier" type="reconnectCustomNotifierType"
                 substitutionGroup="abstract-reconnect-notifier">
        <xsd:annotation>
            <xsd:documentation>
                A user-defined reconnection notifier.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="reconnectCustomNotifierType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectNotifierType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>A class that implements the RetryNotifier interface.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    
    <xsd:complexType name="asyncReplyCollectionType">
        <xsd:sequence>
            <xsd:element ref="abstract-inbound-endpoint" minOccurs="1" maxOccurs="unbounded"/>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="abstract-async-reply-router"/> <!-- Deprecated -->
                <xsd:element ref="abstract-inbound-router"/>
                <xsd:element ref="processor"/>
                <xsd:element ref="custom-processor"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="timeout" type="substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    The timeout (ms) to wait for a reply.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="failOnTimeout" type="substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    If the router times out before all expected events have been received, specifies whether an exception should be thrown (true) or the current events should be returned for processing (false). The default is true.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstract-async-reply-router" abstract="true" type="abstractAsyncReplyRouterType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an async reply router element. Asynchronous replies are handled via this router.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractAsyncReplyRouterType"/>

    <xsd:element name="service" type="sedaServiceType" substitutionGroup="abstract-service">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: Services are deprecated in Mule 3.4 and will be removed in Mule 4.0.
                Describes how to receive messages, deliver them to a component, and handle the results (if any).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="sedaServiceType">
        <xsd:complexContent>
            <xsd:extension base="baseServiceType">
                <xsd:sequence>
                    <xsd:element ref="abstract-service-threading-profile" minOccurs="0"/>
                    <xsd:element ref="abstract-queue-profile" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="queueTimeout" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The timeout used when taking messages from the service queue.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-service" type="customServiceType" substitutionGroup="abstract-service">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: Services are deprecated in Mule 3.4 and will be removed in Mule 4.0.
                A user-implemented service (typically used only in testing).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customServiceType">
        <xsd:complexContent>
            <xsd:extension base="baseServiceType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The class to use for the service.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-service-threading-profile" abstract="true"
                 type="abstractServiceThreadingProfileType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for the service threading profile element. Threading profiles define how thread pools are used by a service.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractServiceThreadingProfileType"/>

    <!--==============================================================-->
    <!--   Flow Constructs                                            -->
    <!--==============================================================-->

    <xsd:element name="abstract-flow-construct" abstract="true" type="abstractFlowConstructType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a flow construct element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractFlowConstructType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this flow construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="abstract" type="xsd:boolean" use="optional" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines if the flow construct is abstract (ie a parent that will be inherited in concrete constructs).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="parent" type="xsd:NMTOKEN" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines if the flow construct inherits part of its configuration from a parent construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="baseFlowConstructType">
        <xsd:annotation>
            <xsd:documentation>
                Base support for a flow construct.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractFlowConstructType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the flow construct. It is intended to be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="initialState" default="started">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial state of the flow. Usually a flow is started automatically ("started"), but this attribute can be used to disable initial startup ("stopped").
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="started"/>
                            <xsd:enumeration value="stopped"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="flow" type="flowType">
        <xsd:annotation>
            <xsd:documentation>
                A pipeline of message processors processed using a given processingStrategy.
                Called when a new message is received from a message source, a flow-ref, or programmatically.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:simpleType name="flowProcessingStrategyType">
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of a globally configured processing strategy
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="default">
                        <xsd:annotation>
                            <xsd:documentation>
                                This processing strategy uses the 'queued-asynchronous' strategy where possible, but if an event is synchronous it processes it synchronously rather than failing.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="synchronous">
                        <xsd:annotation>
                            <xsd:documentation>
                                Processes all message processors in the calling thread, waiting for any IO operations (e.g. http request) before continuing processing.  This is also known as 'blocking'.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="non-blocking">
                        <xsd:annotation>
                            <xsd:documentation>
                                Processes message processors in the calling thread, but supported non components will release the calling thread once a request has been sent.  Once a response is available the Flow will continue processing a worker thread.  In order to configure the thread pool used you can configure a custom 'non-blocking-processing-strategy' global element and reference it by name.
                                NOTE: This processing strategy is currently only supported with a  a single 'HTTP Listener’ or when there is no message source configured.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="asynchronous">
                        <xsd:annotation>
                            <xsd:documentation>
                                Uses a thread pool to process the pipeline of message processors asynchronously.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="queued-asynchronous">
                        <xsd:annotation>
                            <xsd:documentation>
                                Decouples the receiving of a new message from its processing using a queue.
                                The queue is polled and a thread pool is used to process the pipeline of message processors asynchronously.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="thread-per-processor">
                        <xsd:annotation>
                            <xsd:documentation>
                                EXPERIMENTAL: Uses a thread pool to process each message processors asynchronously. (each processor has it's own thread pool currently)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="queued-thread-per-processor">
                        <xsd:annotation>
                            <xsd:documentation>
                                EXPERIMENTAL:  Decouples the processing of each message processor using a queue.
                                The queue is polled and use a thread pool to process each message processor asynchronously. (each processor has it's own thread pool currently)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>
    <xsd:complexType name="flowType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the flow construct. It is intended to be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageSourceOrInboundEndpoint" minOccurs="0"/>
                    <xsd:choice minOccurs="1" maxOccurs="unbounded">
                        <xsd:group ref="messageProcessorOrOutboundEndpoint"/>
                        <xsd:element name="response">
                            <xsd:annotation>
                                <xsd:documentation>
                                    An outbound endpoint
                                </xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:group ref="messageProcessorOrOutboundEndpoint" maxOccurs="unbounded"/>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:choice>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                    <xsd:element ref="abstract-message-info-mapping" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The message info mapper used to extract key bits of the message information, such as Message ID or Correlation ID. these properties are used by some routers and this mapping information tells Mule where to get the information from in the current message.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this flow construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                 <xsd:attribute name="processingStrategy" use="optional" type="flowProcessingStrategyType">
                    <xsd:annotation>
                        <xsd:documentation>
                            Strategy used to process the configured message processors when exchange pattern is 'one-way'.
                            This attribute accepts either one of the enumerated strategies with default configuration options or a reference to a globally defined strategy.
                            If not specified, it will be taken from the defaultProcessingStrategy attribute of the &lt;configuration&gt; element. If that one
                            is not defined either, then the mule.default.processing.strategy system property will be checked. If that's not setup
                            either, then the value 'default' will be used
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="initialState" default="started">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial state of the flow. Usually a flow is started automatically ("started"), but this attribute can be used to disable initial startup ("stopped").
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="started"/>
                            <xsd:enumeration value="stopped"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
           </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--  Processing Strategies -->
    
    <xsd:element name="abstract-processing-strategy" type="processingStrategyType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                The processing strategy to be used for processing a pipeline of message processors (e.g. in a Flow)
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="processingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify the processing strategy.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="asynchronous-processing-strategy" type="asynchronousProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
               Processing strategy that uses a thread pool to process the pipeline of message processors asynchronously in a worker thread.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="asynchronousProcessingStrategy">
        <xsd:complexContent>
            <xsd:extension base="processingStrategyType">
                <xsd:attribute name="maxThreads" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The maximum number of threads that will be used when under load.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="minThreads" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The number of idle threads that will kept in the pool when there is no load.  
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="commonThreadPoolAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="queued-asynchronous-processing-strategy" type="queuedAsynchronousProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Decouples the receiving of a new message from it's processing using a queue.
                The queue is polled and a thread pool is used to process the pipeline of message processors asynchronously in a worker thread.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="queuedAsynchronousProcessingStrategy">
        <xsd:complexContent>
            <xsd:extension base="asynchronousProcessingStrategy">
                <xsd:sequence>
                    <xsd:element ref="abstract-queue-store" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            The queue store that stores the queue's elements.  If not specified, this will be the default-in-memory-queue-store.
                        </xsd:documentation>
                    </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="queueTimeout" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The timeout used when taking messages from the service queue.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxQueueSize" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines the maximum number of messages that can be queued or '-1' for unlimited.  From 3.6 the default value used is four times the value of the 'maxThreads' attribute, previously the default value was '-1' (unlimited).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="thread-per-processor-processing-strategy" type="asynchronousProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
                EXPERIMENTAL: Uses a thread pool to process each message processors asynchronously in a worker thread. (each processor has it's own thread pool currently)
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="queued-thread-per-processor-processing-strategy" type="queuedAsynchronousProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
                EXPERIMENTAL:  Decouples the processing of each message processor using a queue. 
                The queue is polled and use a thread pool to process each message processor asynchronously in a worker thread. (each processor has it's own thread pool currently)
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="non-blocking-processing-strategy" type="nonBlockingProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Processes message processors in the calling thread, but supported non-blocking components will release the calling thread once a request has been sent.  Once a response is available the Flow will continue processing a worker thread.
                NOTE: This processing strategy is currently only supported with a  a single 'HTTP Listener’ or when there is no message source configured.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="nonBlockingProcessingStrategy">
        <xsd:complexContent>
            <xsd:extension base="asynchronousProcessingStrategy"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-processing-strategy" type="customProcessingStrategy" substitutionGroup="abstract-processing-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Allows for the configuration of a custom processing strategy that implements 'org.mule.api.construct.PipelineProcessingStrategy'.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customProcessingStrategy">
        <xsd:complexContent>
            <xsd:extension base="processingStrategyType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="flow-ref" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Allows a 'flow' to be referenced such that the message processing will continue in the referenced flow before returning.
                Message processing in the referenced 'flow' will occur within the context of the referenced flow and will therefore use its exception strategy etc.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="abstractMessageProcessorType">
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="simple-service" type="simpleServiceType" substitutionGroup="abstract-flow-construct">
        <xsd:annotation>
            <xsd:documentation>
                Deprecated. Use pattern:simple-service instead
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:attributeGroup name="simpleServiceTypes">
        <xsd:attribute name="type">
            <xsd:annotation>
                <xsd:documentation>
                  Defines the type of simple service.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="direct">
                      <xsd:annotation>
                        <xsd:documentation>
                          Pass the inbound messages unaltered to the component.
                        </xsd:documentation>
                      </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="jax-ws">
                      <xsd:annotation>
                        <xsd:documentation>
                          Expose a JAX-WS annoted component as a web service. The CXF module is required to have this working.
                        </xsd:documentation>
                      </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="jax-rs">
                      <xsd:annotation>
                        <xsd:documentation>
                          Expose a JAX-RS annoted component as a web service. The Jersey module is required to have this working.
                        </xsd:documentation>
                      </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:attributeGroup>
    <xsd:complexType name="simpleServiceType">
        <xsd:annotation>
            <xsd:documentation>
                A simple request-response service, with no outbound router.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="baseFlowConstructType">
                <xsd:sequence>
                    <xsd:element ref="abstract-inbound-endpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The endpoint on which messages are received.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-component" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The component that is invoked when incoming messages are received.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="address" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The address on which this simple service is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="endpoint-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The endpoint on which this simple service is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="transformer-refs" type="xsd:NMTOKENS">
                    <xsd:annotation>
                        <xsd:documentation>
                            A list of the transformers that will be applied (in order) to the message before it is delivered to the component.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="responseTransformer-refs" type="xsd:NMTOKENS">
                    <xsd:annotation>
                        <xsd:documentation>
                            A list of the transformers that will be applied (in order) to the synchronous response before it is returned via the transport.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="component-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The component that is invoked when incoming messages are received.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="component-class" type="substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies a component class. This is a shortcut that is equivalent to providing a 'prototype-object' element.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="simpleServiceTypes" />
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="bridge" type="bridgeType" substitutionGroup="abstract-flow-construct">
        <xsd:annotation>
            <xsd:documentation>
                Deprecated. Use pattern:bridge instead
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="bridgeType">
        <xsd:annotation>
            <xsd:documentation>
                A bridge with a single inbound endpoint and a single outbound endpoint.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="baseFlowConstructType">
                <xsd:sequence>
                    <xsd:element ref="abstract-inbound-endpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The endpoint on which messages are received.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-outbound-endpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The endpoint to which messages are sent.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="inboundAddress" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The address on which this bridge is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="inboundEndpoint-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The endpoint on which this bridge is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="outboundAddress" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The address to which messages are sent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="outboundEndpoint-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The endpoint to which messages are sent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="transformer-refs" type="xsd:NMTOKENS">
                    <xsd:annotation>
                        <xsd:documentation>
                            A list of the transformers that will be applied (in order) to the message before it is delivered to the destination endpoint.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="responseTransformer-refs" type="xsd:NMTOKENS">
                    <xsd:annotation>
                        <xsd:documentation>
                            A list of the transformers that will be applied (in order) to the synchronous response (if any) of the destination endpoint.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="allExchangePatterns" />
                <xsd:attribute name="transacted" type="xsd:boolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines if the bridge will consume its inbound messages and dispatch its outbound ones within a transaction.
                            Attempt will be made to automatically select the most appropriate transaction manager (including XA): for more control, use child endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="validator" type="validatorType" substitutionGroup="abstract-flow-construct">
        <xsd:annotation>
            <xsd:documentation>
                Deprecated. Use pattern:validator instead
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="validatorType">
        <xsd:annotation>
            <xsd:documentation>
                A validator with a single request-response inbound endpoint and a single outbound endpoint.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="baseFlowConstructType">
                <xsd:sequence>
                    <xsd:element ref="abstract-inbound-endpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The endpoint on which messages are received.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-filter" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The filter to use to validate incoming message: accepted messages are considered valid.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-outbound-endpoint" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The endpoint to which messages are sent.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="legacy-abstract-exception-strategy" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="inboundAddress" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The address on which this bridge is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="inboundEndpoint-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The endpoint on which this bridge is listening.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="validationFilter-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The filter to use to validate incoming message: accepted messages are considered valid.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="outboundAddress" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The address to which messages are sent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="outboundEndpoint-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The endpoint to which messages are sent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="ackExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            An expression used to build the content of the response in case a valid message has been received.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="nackExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            An expression used to build the content of the response in case an invalid message has been received.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="errorExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            An expression used to build the content of the response in case an error occurs during the outbound dispatch.
                            The outbound endpoint's exchange pattern must be request-response if errorExpression is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!-- Components                                              -->
    <!--==============================================================-->

    <xsd:element name="abstract-component" abstract="true" type="abstractComponentType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a component element. A component is invoked when inbound messages are received by the service.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractComponentType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
            <xsd:group ref="interceptorGroup" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Interceptors that can be used to intercept component invocation.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:group>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="component" type="defaultJavaComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                A simple POJO (Plain Old Java Object) component that will be invoked by Mule when a message is received. The class or object instance to be used can be specified using a child object factory element, or via the 'class' attribute.  If the 'class' attribute is used, an object factory cannot be configured as well. Using the 'class' attribute is equivilant to using the propotype object factory ('prototype-object' child element).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="defaultJavaComponentType">
        <xsd:complexContent>
            <xsd:extension base="abstractComponentType">
                <xsd:sequence>
                    <xsd:group ref="entryPointResolvers">
                        <xsd:annotation>
                            <xsd:documentation>
                                Entry point resolvers that are used to determine how a message is passed to a component.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:group>
                    <xsd:element ref="abstract-object-factory" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object factory used to obtain the object instance that will be used for the component implementation. The object factory is responsible for object creation and may implement different patterns, such as singleton or prototype, or look up an instance from other object containers.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="abstract-lifecycle-adapter-factory" minOccurs="0"/>
                    <xsd:element name="binding" type="pojoBindingType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A binding associates a Mule endpoint with an injected Java interface. This is like using Spring to inject a bean, but instead of calling a method on the bean, a message is sent to an endpoint.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies a component class. This is a shortcut that is equivalent to providing a 'prototype-object' element.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="pooled-component" type="pooledJavaComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                A pooled POJO (Plain Old Java Object) component that will be invoked by Mule when a message is received. The instance can be specified via a factory or a class.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="pooledJavaComponentType">
        <xsd:complexContent>
            <xsd:extension base="defaultJavaComponentType">
                <xsd:sequence>
                    <xsd:element ref="abstract-pooling-profile" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Characteristics of the object pool.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="pojoBindingType">
        <xsd:sequence>
            <xsd:element ref="abstract-outbound-endpoint" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="interface" use="required" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface to be injected. A proxy will be created that implements this interface by calling out to the endpoint.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="method" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The method on the interface that should be used. This can be omitted if the interface has a single method.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="defaultComponentType">
        <xsd:complexContent>
            <xsd:extension base="abstractComponentType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- don't expose this, it's not needed -->
    <!-- xsd:element name="pass-through-component" type="defaultComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                The default, "do nothing" component.
                The message is simply transferred from inbound to outbound endpoints.
                This is the default and need not be specified.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element -->

    <xsd:element name="echo-component" type="defaultComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                Logs the message and returns the payload as the result.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="log-component" type="defaultComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                Logs the message content (or content length if it is a large message).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="null-component" type="defaultComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                Throws an exception if it receives a message.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="static-component" type="staticComponentType" substitutionGroup="abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                A service that will return static data as a result.  The data returned can be read from a file or can be embedded directly in the XML.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="staticComponentType">
        <xsd:complexContent>
            <xsd:extension base="abstractComponentType">
                <xsd:sequence>
                    <xsd:element name="return-data" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Defines the data to return from the service once it has been invoked. The return data can be located in a file, which you specify using the {{file}} attribute (specify a resource on the classpath or on disk), or the return data can be embedded directly in the XML.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType mixed="true">
                            <xsd:attribute name="file" type="xsd:string">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The location of a file to load. The file can point to a resource on the classpath or on disk.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Transactions                                               -->
    <!--==============================================================-->

    <xsd:element name="abstract-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction elements. Transactions allow a series of operations to be grouped together.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-xa-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for XA transaction elements. XA transactions allow a series of operations to be grouped together spanning different transports, such as JMS and JDBC.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-multi-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for multi-transaction elements.
                Multi-transactions allow a series of operations to be grouped together spanning different
                transports, e.g. JMS and JDBC, but without the overhead of XA. The trade-off is that XA
                reliability guarantees aren't available, and services must be ready to handle duplicates.
                This is very similar to a 1.5 PC concept. EE-only feature.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractTransactionType">
        <xsd:attribute name="action" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The type of action the transaction should take, one of the following:
                    NONE - Never participate in a transaction.
                    ALWAYS_BEGIN - Always start a new transaction when receiving a message. An exception will be thrown if a transaction already exists.
                    BEGIN_OR_JOIN - If a transaction is already in progress when a message is received, join the transaction if possible. Otherwise, start a new transaction.
                    ALWAYS_JOIN - Always expects a transaction to be in progress when a message is received. If there is no transaction, an exception is thrown.
                    JOIN_IF_POSSIBLE - Join the current transaction if one is available. Otherwise, no transaction is created.
                    NOT_SUPPORTED - Execute outside any existent transaction
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="NONE"/>
                    <xsd:enumeration value="ALWAYS_BEGIN"/>
                    <xsd:enumeration value="BEGIN_OR_JOIN"/>
                    <xsd:enumeration value="ALWAYS_JOIN"/>
                    <xsd:enumeration value="JOIN_IF_POSSIBLE"/>
                    <xsd:enumeration value="NOT_SUPPORTED"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="timeout" type="substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    Timeout for the transaction (ms).
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="baseTransactionType">
        <xsd:complexContent>
            <xsd:extension base="abstractTransactionType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-transaction" type="customTransactionType" substitutionGroup="abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                A user-defined or otherwise unsupported third-party transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customTransactionType">
        <xsd:complexContent>
            <xsd:extension base="baseTransactionType">
                <xsd:attribute name="factory-class" type="substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            A class that implements the TransactionFactory interface that will be instantiated and used to generate a transaction. This attribute and the 'factory-ref' attribute are mutually exclusive; one of the two is required.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="factory-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A bean that implements the TransactionFactory interface that will be used to generate a transaction. This attribute and the 'factory-class' attribute are mutually exclusive; one of the two is required.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xa-transaction" type="xaTransactionType" substitutionGroup="abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                An XA transaction.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="xaTransactionType">
        <xsd:complexContent>
            <xsd:extension base="baseTransactionType">
                <xsd:attribute name="interactWithExternal" type="xsd:boolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If this is set to "true", Mule interacts with transactions begun outside of Mule.  E.g. if an external transaction is active, then BEGIN_OR_JOIN wil join it, and ALWAYS_BEGIN will cause an exception to be thrown.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="transactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="abstractTransactionManagerType">
                <xsd:attribute name="name" type="substitutableName" default="transactionManager" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            An optional name for the transaction manager. The default value is "transactionManager".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="websphere-transaction-manager" type="transactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                The WebSphere transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="jboss-transaction-manager" type="transactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                The JBoss transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="jndiTransactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="abstractTransactionManagerType">
                <xsd:sequence>
                    <xsd:element name="environment" type="mapType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                The JNDI environment.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="weblogic-transaction-manager" type="jndiTransactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                The WebLogic transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="jrun-transaction-manager" type="transactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                The JRun transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="resin-transaction-manager" type="transactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                The Resin transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jndi-transaction-manager" substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                Retrieves a named transaction manager factory from JNDI.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="jndiTransactionManagerType">
                    <xsd:attribute name="jndiName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The name of the manager factory to retrieve (such as java:/TransactionManager).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="custom-transaction-manager" type="customTransactionManagerType"
                 substitutionGroup="abstract-transaction-manager">
        <xsd:annotation>
            <xsd:documentation>
                A user-implemented transaction manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customTransactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="jndiTransactionManagerType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The class to instantiate to create a transaction manager.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!--==============================================================-->
    <!--   Endpoint elements                                          -->
    <!--==============================================================-->

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="abstract-global-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                A global endpoint, which acts as a template that can be used to construct an inbound or outbound endpoint elsewhere in the configuration by referencing the global endpoint name. Each transport implements its own endpoint element, with a more friendly syntax, but this generic element can be used with any transport by supplying the correct address URI. For example, "vm://foo" describes a VM transport endpoint.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="globalEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="abstractGlobalEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="globalEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <!-- extend this type for endpoints that support XA transactions -->
    <xsd:complexType name="globalEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="abstractGlobalEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="abstract-inbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An inbound endpoint receives messages via the associated transport. As with global endpoints, each transport implements its own inbound endpoint element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="inboundEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="abstractInboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="inboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <!-- extend this type for endpoints that support XA transactions -->
    <xsd:complexType name="inboundEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="abstractInboundEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-scheduler" abstract="true" type="abstractSchedulerType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for shedulers
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractSchedulerType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="fixedSchedulerType">
        <xsd:complexContent>
            <xsd:extension base="abstractSchedulerType">
                <xsd:attribute name="frequency" type="substitutableLong" default="1000">
                    <xsd:annotation>
                        <xsd:documentation>
                            Polling frequency in milliseconds. Default frequency is 1000ms (1s).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="timeUnit" default="MILLISECONDS" type="timeUnitType">
                    <xsd:annotation>
                        <xsd:documentation>
                            The time unit for the frequency value
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="startDelay" type="substitutableLong" default="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            The delay time in time units that sheduler needs to wait before start
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="fixed-frequency-scheduler" type="fixedSchedulerType" substitutionGroup="abstract-scheduler"/>

    <xsd:element name="poll" type="pollInboundEndpointType" substitutionGroup="abstract-message-source">
        <xsd:annotation>
            <xsd:documentation>
                Polls the nested message processor for new messages
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="pollInboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageSourceType">
                <xsd:sequence>
                    <xsd:element ref="abstract-scheduler" minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="abstract-poll-override" minOccurs="0" maxOccurs="1"/>
                    <xsd:group ref="messageProcessorOrOutboundEndpoint"/>
                </xsd:sequence>
                <xsd:attribute name="frequency"  type="substitutableLong" default="1000">
                    <xsd:annotation>
                        <xsd:documentation>
                            Polling frequency in milliseconds. Default frequency is 1000ms (1s). Deprecated since 3.5.0. use fixed-frequency-scheduler instead
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="abstract-outbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An outbound endpoint sends messages via the associated transport. As with global endpoints, each transport implements its own outbound endpoint element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="outboundEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="abstractOutboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="outboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="outboundEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="abstractOutboundEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexConten